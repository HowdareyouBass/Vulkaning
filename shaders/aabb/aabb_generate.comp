#version 460
#extension GL_EXT_buffer_reference : require

layout (local_size_x = 32) in;

struct Vertex
{
    vec3 position;
    float uv_x;
    vec3 normal;
    float uv_y;
    vec4 color;
};

layout (buffer_reference, std430) readonly buffer VertexBuffer
{
    Vertex vertices[];
};

layout (push_constant) uniform constants
{
    VertexBuffer vertex_buffer;
    uint object_index;
}pc; 

struct AABB
{
    float max_x;
    float min_x;
    float max_y;
    float min_y;
    float max_z;
    float min_z;
};
layout (set = 0, binding = 0) buffer AABBsBuffer
{
    AABB aabbs[];
};

void main()
{
    Vertex v = pc.vertex_buffer.vertices[gl_GlobalInvocationID.x];

    // TODO: Clamp the vaules so aabb always has area
    aabbs[pc.object_index].max_x = max(aabbs[pc.object_index].max_x, v.position.x);
    aabbs[pc.object_index].min_x = min(aabbs[pc.object_index].min_x, v.position.x);
    aabbs[pc.object_index].max_y = max(aabbs[pc.object_index].max_y, v.position.y);
    aabbs[pc.object_index].min_y = min(aabbs[pc.object_index].min_y, v.position.y);
    aabbs[pc.object_index].max_z = max(aabbs[pc.object_index].max_z, v.position.z);
    aabbs[pc.object_index].min_z = min(aabbs[pc.object_index].min_z, v.position.z);
}
